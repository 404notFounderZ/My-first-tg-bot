import datetime
import os

import zxing
from aiogram import types, Bot
from aiogram.enums import ParseMode
from dotenv import load_dotenv

load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')
bot = Bot(token=BOT_TOKEN)


# —Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ QR-–∫–æ–¥–∞ —Å –ø–æ–º–æ—â—å—é Zxing
async def decode_zxing(image_p):
    reader = zxing.BarCodeReader(java='C:\\Program Files\\Java\\jdk-23\\bin\\java.exe')
    barc = reader.decode(image_p)
    if barc and barc.parsed:
        return barc.parsed
    return None

# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ qr –∫–æ–¥–∞
async def decode_qr(message: types.Message):
    current_time = datetime.datetime.now().time()
    print(f'    –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {message.from_user}')
    print(f'–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {current_time}')
    print('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É QR-code')
    try:
        # —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        file_id = message.photo[-1].file_id
        file = await bot.get_file(file_id)
        temp_path = "temp/qr_image.png"
        await bot.download_file(file.file_path, temp_path)
        # —Ä–∞—Å–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        qr_data = await decode_zxing(temp_path)

        # —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(temp_path)

        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if qr_data:
            await message.reply(f'üîíQR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω\n\n'
                                f'‚ÑπÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å QR-–∫–æ–¥–∞: <tg-spoiler>{qr_data}</tg-spoiler>',
                                parse_mode=ParseMode.HTML)
        else:
            await message.reply('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å QR-–∫–æ–¥')

    except Exception as e:
        await message.reply(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ QR-–∫–æ–¥–∞: {e}')
